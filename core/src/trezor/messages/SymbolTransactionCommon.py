# Automatically generated by pb2py
# fmt: off
# isort:skip_file
import protobuf as p

if __debug__:
    try:
        from typing import Dict, List, Optional  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
        EnumTypeSymbolNetworkType = Literal[96, 104, 144, 152]
    except ImportError:
        pass


class SymbolTransactionCommon(p.MessageType):

    def __init__(
        self,
        *,
        signer_public_key: Optional[bytes] = None,
        version: Optional[int] = None,
        network_type: Optional[EnumTypeSymbolNetworkType] = None,
        max_fee: Optional[int] = None,
        deadline: Optional[int] = None,
    ) -> None:
        self.signer_public_key = signer_public_key
        self.version = version
        self.network_type = network_type
        self.max_fee = max_fee
        self.deadline = deadline

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('signer_public_key', p.BytesType, None),
            2: ('version', p.UVarintType, None),
            3: ('network_type', p.EnumType("SymbolNetworkType", (104, 152, 96, 144,)), None),
            4: ('max_fee', p.UVarintType, None),
            5: ('deadline', p.UVarintType, None),
        }
