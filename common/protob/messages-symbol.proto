syntax = "proto2";
package hw.trezor.messages.symbol;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageSymbol";


/**
 * Request: Ask device for Symbol address corresponding to address_n path
 * @start
 * @next SymbolAddress
 * @next Failure
 */
 message SymbolGetAddress {
    repeated uint32 address_n    = 1;     // BIP-32 path to derive the key from master node
    optional uint32 network      = 2;     // Network ID -> 0x68 = (MAIN_NET), 0x98 (TEST_NET), 0x60 (PRIVATE), 0x90 (PRIVATE_TEST)
    optional bool   show_display = 3;     // Optionally show on display before sending the result
}

/**
 * Response: Contains Symbol address derived from device private seed
 * @end
 */

message SymbolAddress {
    optional string address = 1;    // Symbol address in Base32 encoding
}

message SymbolGetPublicKey {
    repeated uint32 address_n    = 1;     // BIP-32 path to derive the key from master node
    optional bool   show_display = 2;     // Optionally show on display before sending the result
}

message SymbolPublicKey {
    optional bytes public_key    = 1;     // BIP-32 path to derive the key from master node
}


/**
 * Request: Ask device to sign transaction
 * ----------------------------------------------------------------------------------------------------------------------------
 * @start
 * @next SymbolSignedTx
 * @next Failure
 */
message SymbolSignTx {
    optional SymbolTransactionCommon           transaction                   = 1;
    optional SymbolTransfer                    transfer                      = 2;
       
    optional SymbolKeyLink                     account_key_link              = 3;
    optional SymbolKeyLink                     node_key_link                 = 4;
    optional SymbolKeyLink                     vrf_key_link                  = 5;
    optional SymbolVotingKeyLink               voting_key_link               = 6;
       
    optional SymbolHashLock                    hash_lock                     = 7;
       
    optional SymbolSecretLock                  secret_lock                   = 8;
    optional SymbolSecretProof                 secret_proof                  = 9;
       
    optional SymbolAccountMetadata             account_metadata              = 10;
    optional SymbolMosaicNamespaceMetadata     mosaic_metadata               = 11;
    optional SymbolMosaicNamespaceMetadata     namespace_metadata            = 12;

    optional SymbolMultisigAccountModification multisig_account_modification = 13;

    optional SymbolMosaicDefinition            mosaic_definition             = 14;
    optional SymbolMosaicSupplyChange          mosaic_supply_change          = 15;
           
    optional SymbolNamespaceRegistration       namespace_registration        = 16;
    optional SymbolAddressAlias                address_alias                 = 17;



    enum SymbolNetworkType {
        MAIN_NET     = 0x68;  // Public network
        TEST_NET     = 0x98;  // Public test network
        PRIVATE      = 0x60;  // Private network
        PRIVATE_TEST = 0x90;  // Private test network
    }

    enum SymbolEntityType {
        ACCOUNT_KEY_LINK              = 0x414C;
        NODE_KEY_LINK                 = 0x424C;
        VRF_KEY_LINK                  = 0x4243;
        VOTING_KEY_LINK               = 0x4143;
       
        HASH_LOCK                     = 0x4148;
       
        SECRET_LOCK                   = 0x4152;
        SECRET_PROOF                  = 0x4252;        
       
        ACCOUNT_METADATA              = 0x4144;
        MOSAIC_METADATA               = 0x4244;
        NAMESPACE_METADATA            = 0x4344;

        MULTISIG_ACCOUNT_MODIFICATION = 0x4155;

        TRANSFER                      = 0x4154;
               
        MOSAIC_DEFINITION             = 0x414D;
        MOSAIC_SUPPLY_CHANGE          = 0x424D;
       
        NAMESPACE_REGISTRATION        = 0x414E;
        ADDRESS_ALIAS                 = 0x424E;
    }


    message SymbolMosaic {
        optional uint64 id     = 1;
        optional uint64 amount = 2;
    }

   /**
    * Structure representing the common part for Symbol transactions
    *
    * https://docs.symbolplatform.com/serialization/transaction.html#transaction
    */
    message SymbolTransactionCommon {
        repeated uint32            address_n         = 1;  // BIP-32 path to derive the key from master node

        optional string            signer_public_key = 2;   // Public key of the signer of the entity
        optional uint32            version           = 3;   // Version of the structure
        optional SymbolNetworkType network_type      = 4;   // public or private network

        optional uint64            max_fee           = 5;   // Max fee which should be paid for the transaction
        optional uint64            deadline          = 6;   // Drop transaction if it does not get included in a block before deadline is reached (Number of milliseconds since the creation of the nemesis block) 
    }



   
    // Account link schemas
    // ---------------------------------------------------------------------------------------------------------------------------------

   /**
    * AccountKeyLinkTransaction, NodeKeyLinkTransaction and VrfKeyLinkTransaction
    *
    * https://docs.symbolplatform.com/serialization/account_link.html#accountkeylinktransaction
    * https://docs.symbolplatform.com/serialization/account_link.html#nodekeylinktransaction
    * https://docs.symbolplatform.com/serialization/coresystem.html#vrf-key-link-transaction
    */
    message SymbolKeyLink {
        optional string public_key = 1; // Linked public key
        optional uint32 action     = 2; // 0x00 -> Unlink account, 0x01 -> Link account.
    }


   /**
    * VotingKeyLinkTransaction
    *
    * https://docs.symbolplatform.com/serialization/coresystem.html#votingkeylinktransaction
    */
    message SymbolVotingKeyLink {
        optional string public_key  = 1; // Linked public key
        optional uint32 start_point = 2; // Start finalization point
        optional uint32 end_point   = 3; // End finalization point
        optional uint32 action      = 4; // 0x00 -> Unlink account, 0x01 -> Link account.
    } 
    


    /**
    * Structure representing the transfer transaction part for Symbol transactions
    */
    message SymbolTransfer {
        optional string       recipient_address = 1; // Address of the recipient

      //optional uint32       message_size      = 2; // Size of the attached message
      //optional uint32       mosaics_count     = 3; // Number of attached mosaics
      //optional uint32       reserved1         = 4; // Reserved padding
      //optional uint32       reserved2         = 5; // Reserved padding

        repeated SymbolMosaic mosaics           = 2; // Mosaics to send
        optional bytes        message           = 3; // Hexadecimal payload
    }


    // Mosaic Schemas
    // ---------------------------------------------------------------------------------------------------------------------------------

   /**
    *
    * https://docs.symbolplatform.com/serialization/mosaic.html#mosaicdefinitiontransaction
    */
    message SymbolMosaicDefinition {
        optional uint64 id           = 1; // Identifier of the mosaic
        optional uint64 duration     = 2; // Mosaic duration expressed in blocks. If set to 0, the mosaic is non-expiring
        optional uint32 nonce        = 3; // Random nonce used to generate the mosaic id
        optional uint32 flags        = 4; // Mosaic flags
        optional uint32 divisibility = 5; // Mosaic divisibility
    }


    /**
    *
    * https://docs.symbolplatform.com/serialization/mosaic.html#mosaicsupplychangetransaction
    */
    message SymbolMosaicSupplyChange {
        optional SymbolMosaic mosaic = 1; // Affected mosaic identifier.
        optional uint32       action = 2; // Supply change action (0x00 -> Decrease, 0x01 -> Increase).
    }




    // Namespace Schemas
    // ---------------------------------------------------------------------------------------------------------------------------------


    /**
     *
     * https://docs.symbolplatform.com/serialization/namespace.html#namespaceregistrationtransaction
     */
    message SymbolNamespaceRegistration {
        optional uint64 duration          = 1; // Number of confirmed blocks to rent the namespace for. Required for root namespaces.
        optional uint64 parent_id         = 2; // Parent namespace identifier. Required for subnamespaces.
        optional uint64 id                = 3; // Parent namespace identifier. Required for subnamespaces.
        optional uint32 registration_type = 4; // Namespace registration type.
        optional string name              = 5; // Namespace name.
    }

    /**
    *
    * https://docs.symbolplatform.com/serialization/namespace.html#addressaliastransaction
    */
    message SymbolAddressAlias {
        optional uint64 namespace_id = 1; // Identifier of the namespace that will become an alias. (hex format, 8 bytes) 
        optional string address      = 2; // Aliased address (base32 format, 24 bytes).
        optional uint32 action       = 3; // Alias action.   
    }



    // Lock Hash Schemas
    // ---------------------------------------------------------------------------------------------------------------------------------

    /**
     * https://docs.symbolplatform.com/serialization/lock_hash.html#hashlocktransaction
     */
    message SymbolHashLock {
        optional SymbolMosaic mosaic   = 1; // Locked mosaic
        optional uint64       duration = 2; // Number of blocks for which a lock should be valid
        optional string       hash     = 3; // AggregateBondedTransaction hash that has to be confirmed before unlocking the mosaics
    }


    // Lock Secret Schemas
    // ---------------------------------------------------------------------------------------------------------------------------------

    /**
     * https://docs.symbolplatform.com/serialization/lock_secret.html#secretlocktransaction
     */
     message SymbolSecretLock {
        optional string       recipient      = 1; // Address that receives the funds once unlocked.
        optional string       secret         = 2; // Proof hashed.
        optional SymbolMosaic mosaic         = 3; // Locked mosaic.
        optional uint64       duration       = 4; // Number of blocks for which a lock should be valid. If reached, the mosaics will be returned to the initiator.
        optional uint32       hash_algorithm = 5; // Algorithm used to hash the proof.
    }
    
    /**
     * https://docs.symbolplatform.com/serialization/lock_secret.html#secretlocktransaction
     */
     message SymbolSecretProof {
        optional string       recipient      = 1; // Address that receives the funds once unlocked.
        optional string       secret         = 2; // Proof hashed.
        optional uint32       hash_algorithm = 3; // Algorithm used to hash the proof.
        optional string       proof          = 4; // Original random set of bytes.
    }
    


    // Metadata Schemas
    // ---------------------------------------------------------------------------------------------------------------------------------

    /** 
     * AccountMetadataTransaction:
     * https://docs.symbolplatform.com/serialization/metadata.html#accountmetadatatransaction
     */
    message SymbolAccountMetadata {
        optional string address             = 1; // Metadata target address.
        optional uint64 scoped_metadata_key = 2; // Metadata key scoped to source, target and type.
        optional uint32 value_size_delta    = 3; // Change in value size in bytes.
        optional bytes  value               = 4; // Difference between the previous value and new value.
    }

    /**
    * MosaicMetadataTransaction and NamespaceMetadataTransaction:
    * https://docs.symbolplatform.com/serialization/metadata.html#mosaicmetadatatransaction
    * https://docs.symbolplatform.com/serialization/metadata.html#namespacemetadatatransaction
    */
    message SymbolMosaicNamespaceMetadata {
        optional SymbolAccountMetadata header    = 1;
        optional uint64                target_id = 2; // Target namespace or mosaic identifier.
    }



    // Multisig Schemas
    // ---------------------------------------------------------------------------------------------------------------------------------

    /**
     * MultisigAccountModificationTransaction
     * https://docs.symbolplatform.com/serialization/multisig.html#multisigaccountmodificationtransaction
     */
    message SymbolMultisigAccountModification {
        optional uint32 min_removal_delta   = 1;
        optional uint32 min_approval_delta  = 2;
        optional uint32 reserve             = 3;
        repeated string address_additions   = 4;
        repeated string address_deletions   = 5;
    }
    
}


/**
 * Response: Contains Symbol transaction data and signature
 * @end
 */
message SymbolSignedTx {
    required bytes data      = 1;   // Transaction data
    required bytes signature = 2;   // Signature for the transaction
}
